<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InternalApi.Api</name>
    </assembly>
    <members>
        <member name="T:InternalApi.Contracts.ICachedCurrencyApi">
            <summary>
                Сервис кеширования данных из внешнего API
            </summary>
        </member>
        <member name="M:InternalApi.Contracts.ICachedCurrencyApi.GetCurrentCurrencyAsync(InternalApi.Entities.CurrencyType,System.Threading.CancellationToken)">
            <summary>
                Получает текущий курс
            </summary>
            <param name="currencyType">Валюта, для которой необходимо получить курс</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Текущий курс</returns>
        </member>
        <member name="M:InternalApi.Contracts.ICachedCurrencyApi.GetCurrencyOnDateAsync(InternalApi.Entities.CurrencyType,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получает курс валюты, актуальный на <paramref name="date" />
            </summary>
            <param name="currencyType">Валюта, для которой необходимо получить курс</param>
            <param name="date">Дата, на которую нужно получить курс валют</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Курс на дату</returns>
        </member>
        <member name="T:InternalApi.Contracts.ICurrencyApi">
            <summary>
            Сервис взаимодействия со внешним CurrencyAPI
            </summary>
        </member>
        <member name="M:InternalApi.Contracts.ICurrencyApi.GetAllCurrentCurrenciesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Получает текущий курс для всех валют
            </summary>
            <param name="baseCurrency">Базовая валюта, относительно которой необходимо получить курс</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Список курсов валют</returns>
        </member>
        <member name="M:InternalApi.Contracts.ICurrencyApi.GetAllCurrenciesOnDateAsync(System.String,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получает курс для всех валют, актуальный на <paramref name="date" />
            </summary>
            <param name="baseCurrency">Базовая валюта, относительно которой необходимо получить курс</param>
            <param name="date">Дата, на которую нужно получить курс валют</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Список курсов валют на дату</returns>
        </member>
        <member name="M:InternalApi.Contracts.ICurrencyApi.IsNewRequestsAvailable(System.Threading.CancellationToken)">
            <summary>
                Наличие доступных токенов
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Возвращает true, если есть свободные токены, в иных случаях false</returns>
        </member>
        <member name="T:InternalApi.Contracts.ICurrencyService">
            <summary>
            Сервис для контроллера CurrencyController
            </summary>
        </member>
        <member name="T:InternalApi.Controllers.CurrencyController">
            <summary>
                Методы для взаимодействия со внешним API
            </summary>
        </member>
        <member name="M:InternalApi.Controllers.CurrencyController.#ctor(InternalApi.Contracts.ICachedCurrencyApi,Microsoft.Extensions.Options.IOptions{InternalApi.Dtos.CurrencyCacheSettings},InternalApi.Contracts.ICurrencyApi)">
            <summary>
            Конструктор контроллера
            </summary>
            <param name="cachedCurrencyApi">Сервис кеша для внешнего API</param>
            <param name="cacheSettings">Настройки</param>
            <param name="currencyApi">Сервис внешнего API</param>
        </member>
        <member name="M:InternalApi.Controllers.CurrencyController.GetCurrency(InternalApi.Entities.CurrencyType,System.Threading.CancellationToken)">
            <summary>
                Получение курса валюты с кодом по умолчанию
            </summary>
            <response code="200">Возвращает, если значение успешно получено.</response>
            <response code="400">Возвращает, если значение по умолчанию не найдено</response>
            <response code="429">Возвращает, если токены API исчерпаны.</response>
        </member>
        <member name="M:InternalApi.Controllers.CurrencyController.GetCurrencyOnDate(InternalApi.Entities.CurrencyType,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получение курса валюты на указанную дату
            </summary>
            <param name="currencyType">Тип валюты</param>
            <param name="date">Дата курса</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Возвращает, если значение успешно получено.</response>
            <response code="404">Возвращает, если значение <see cref="!:currencyCode" /> не найдено</response>
            <response code="429">Возвращает, если токены API исчерпаны.</response>
        </member>
        <member name="M:InternalApi.Controllers.CurrencyController.GetSettings(System.Threading.CancellationToken)">
            <summary>
                Текущие настройки приложения
            </summary>
            <response code="200">Возвращает, если настройки успешно получены.</response>
        </member>
        <member name="M:InternalApi.Controllers.CurrencyController.GetHealthCheck(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Проверить что API работает
            </summary>
            <param name="checkExternalApi">Необходимо проверить работоспособность внешнего API.
            Если FALSE или NULL - проверяется работоспособность только текущего API</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">
            Возвращает если удалось получить доступ к API
            </response>
            <response code="400">
            Возвращает если удалось не удалось получить доступ к API
            </response>
        </member>
        <member name="T:InternalApi.Controllers.HealthCheckResult">
            <summary>
            Результат проверки работоспособности API
            </summary>
        </member>
        <member name="P:InternalApi.Controllers.HealthCheckResult.CheckedOn">
            <summary>
            Дата проверки
            </summary>
        </member>
        <member name="P:InternalApi.Controllers.HealthCheckResult.Status">
            <summary>
            Статус работоспособности API
            </summary>
        </member>
        <member name="T:InternalApi.Controllers.HealthCheckResult.CheckStatus">
            <summary>
            Статус API
            </summary>
        </member>
        <member name="F:InternalApi.Controllers.HealthCheckResult.CheckStatus.Ok">
            <summary>
            API работает
            </summary>
        </member>
        <member name="F:InternalApi.Controllers.HealthCheckResult.CheckStatus.Failed">
            <summary>
            Ошибка в работе API
            </summary>
        </member>
        <member name="T:InternalApi.Dtos.ApiStatusDto">
            <summary>
                Статус внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.ApiStatusDto.AccountId">
            <summary>
            ID аккаунта
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.ApiStatusDto.Quotas">
            <summary>
            Лимиты в текущем месяце
            </summary>
        </member>
        <member name="T:InternalApi.Dtos.ApiLimitsDto">
            <summary>
            Лимиты внешнего API
            </summary>
        </member>
        <member name="T:InternalApi.Dtos.RootCurrencyApiDto">
            <summary>
                Получаемый из внешнего API объект
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.RootCurrencyApiDto.Meta">
            <summary>
            Мета-данные запроса
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.RootCurrencyApiDto.Data">
            <summary>
            Содержимое запроса - словарь код_валюты : <see cref="T:InternalApi.Entities.Currency"/>
            </summary>
        </member>
        <member name="T:InternalApi.Dtos.MetaCurrencyApiDto">
            <summary>
                Метадата получаемого из внешнего API объекта <see cref="T:InternalApi.Dtos.CurrencyApiDto" />
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.MetaCurrencyApiDto.LastUpdatedAt">
            <summary>
            Дата последнего обновления курса валюты
            </summary>
        </member>
        <member name="T:InternalApi.Dtos.CurrencyApiDto">
            <summary>
            Курс валюты
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.CurrencyApiDto.Code">
            <summary>
                Код валюты
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.CurrencyApiDto.Value">
            <summary>
                Значение курса валюты, относительно базовой валюты
            </summary>
        </member>
        <member name="T:InternalApi.Dtos.CurrenciesOnDateDto">
            <summary>
            Курсы валют на конкретную дату
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.CurrenciesOnDateDto.LastUpdatedAt">
            <summary>
            Дата обновления данных
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.CurrenciesOnDateDto.Currencies">
            <summary>
            Список курсов валют
            </summary>
        </member>
        <member name="T:InternalApi.Dtos.CurrencyCacheSettings">
            <summary>
                Настройки кеша для внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.CurrencyCacheSettings.CacheExpirationHours">
            <summary>
                Время жизни кеша
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.CurrencyCacheSettings.BaseCurrency">
            <summary>
                Базовая валюта, относительно которой считается курс валюты
            </summary>
        </member>
        <member name="T:InternalApi.Dtos.SettingsDto">
            <summary>
            Настройки API
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.SettingsDto.BaseCurrency">
            <summary>
                базовая валюта, относительно которой считается курс
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.SettingsDto.NewRequestsAvailable">
            <summary>
                количество использованных запросов, полученное от внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Dtos.SettingsDto.CurrencyRoundCount">
            <summary>
                Количество знаков после запятой, до которого следует округлять значение курса валют
            </summary>
        </member>
        <member name="T:InternalApi.Entities.CurrencyApiSettings">
            <summary>
                Настройки внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Entities.CurrencyApiSettings.BaseUrl">
            <summary>
                Адрес внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Entities.CurrencyApiSettings.ApiKey">
            <summary>
                Ключ внешнего API
            </summary>
        </member>
        <member name="T:InternalApi.ExceptionHandlerExtensions">
            <summary>
                Глобальный обработчик исключений
            </summary>
        </member>
        <member name="M:InternalApi.ExceptionHandlerExtensions.#ctor(Microsoft.Extensions.Logging.ILogger{InternalApi.ExceptionHandlerExtensions})">
            <summary>
                Конструктор глобального обработчика исключений
            </summary>
            <param name="logger">Логгер</param>
        </member>
        <member name="M:InternalApi.ExceptionHandlerExtensions.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <inheritdoc />
        </member>
        <member name="T:InternalApi.ExceptionInterceptor">
            <summary>
                Глобальный обработчик исключений для grpc-запросов
            </summary>
        </member>
        <member name="M:InternalApi.ExceptionInterceptor.#ctor(Microsoft.Extensions.Logging.ILogger{InternalApi.ExceptionInterceptor})">
            
        </member>
        <member name="M:InternalApi.ExceptionInterceptor.UnaryServerHandler``2(``0,Grpc.Core.ServerCallContext,Grpc.Core.UnaryServerMethod{``0,``1})">
            <inheritdoc />
        </member>
        <member name="T:InternalApi.InfrastructureExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:InternalApi.InfrastructureExtensions.RegisterDataBase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Регистрирует базу данных в контейнере зависимостей.
            </summary>
            <param name="services">Коллекция сервисов.</param>
            <param name="configuration">Настройки приложения</param>
            <returns>Коллекция сервисов с зарегистрированной базой данных.</returns>
        </member>
        <member name="T:InternalApi.Services.ApiService">
            <summary>
                Сервис для взаимодействия с внешним Currency API
            </summary>
        </member>
        <member name="M:InternalApi.Services.ApiService.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{InternalApi.Entities.CurrencyApiSettings},System.Net.Http.HttpClient)">
            <summary>
                Конструктор класса ApiService
            </summary>
            <param name="apiSettingsSnapshot">Настройки внешнего API</param>
            <param name="httpClient">Http клиент</param>
        </member>
        <member name="M:InternalApi.Services.ApiService.GetAllCurrentCurrenciesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Получение актуального курса валют
            </summary>
            <param name="baseCurrency">Базовая валюта</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Массив <see cref="T:InternalApi.Entities.Currency" />, содержащий актуальный курс валют</returns>
            <exception cref="T:System.OperationCanceledException">Операция была отменена</exception>
        </member>
        <member name="M:InternalApi.Services.ApiService.GetAllCurrenciesOnDateAsync(System.String,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получение курса валют на указанную дату
            </summary>
            <param name="baseCurrency">Базовая валюта</param>
            <param name="date">Дата курса валюты</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Объект <see cref="T:InternalApi.Dtos.CurrenciesOnDateDto" />, содержащий курс валюты на указанную дату</returns>
            <exception cref="T:System.OperationCanceledException">Операция была отменена</exception>
        </member>
        <member name="M:InternalApi.Services.ApiService.IsNewRequestsAvailable(System.Threading.CancellationToken)">
            <summary>
                Существуют ли доступные токены внешнего API?
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <returns>true, если существуют доступные токены, иначе false</returns>
            <exception cref="T:System.OperationCanceledException">Операция была отменена</exception>
        </member>
        <member name="M:InternalApi.Services.ApiService.HttpClientHelper(System.String,System.Threading.CancellationToken)">
            <summary>
                Получение данных из внешнего API
            </summary>
            <param name="url">url</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Тело ответа в виде строки</returns>
        </member>
        <member name="T:InternalApi.Services.ApiRequestLimitException">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Services.ApiRequestLimitException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:InternalApi.Services.CachedCurrencyApi">
            <summary>
                Сервис кеша для CurrencyApi
            </summary>
        </member>
        <member name="M:InternalApi.Services.CachedCurrencyApi.#ctor(Microsoft.Extensions.Logging.ILogger{InternalApi.Services.CachedCurrencyApi},InternalApi.Contracts.ICurrencyApi,Microsoft.Extensions.Options.IOptionsMonitor{InternalApi.Dtos.CurrencyCacheSettings},InternalApi.Infrastructure.AppDbContext,InternalApi.Services.RenewalDatesDictionary)">
            <summary>
                Конструктор класса CachedCurrencyApi
            </summary>
            <param name="logger">Логгер</param>
            <param name="currencyApi">Сервис внешнего API</param>
            <param name="cacheSettings">Настройки кеша</param>
            <param name="dbContext">База данных</param>
            <param name="cacheUpdateLock">Глобальный словарь блокировок для обновления кеша</param>
        </member>
        <member name="M:InternalApi.Services.CachedCurrencyApi.GetCurrentCurrencyAsync(InternalApi.Entities.CurrencyType,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:InternalApi.Services.CacheEntityNotFoundException">
                Выбрасывается, если после обновления кеша не удалось получить сущность
            </exception>
        </member>
        <member name="M:InternalApi.Services.CachedCurrencyApi.GetCurrencyOnDateAsync(InternalApi.Entities.CurrencyType,System.DateOnly,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:InternalApi.Services.CacheEntityNotFoundException">
                Выбрасывается, если после обновления кеша не удалось получить сущность
            </exception>
        </member>
        <member name="M:InternalApi.Services.CachedCurrencyApi.GetEntityAsync(InternalApi.Entities.CurrencyType,System.Nullable{System.DateOnly},System.Threading.CancellationToken)">
            <summary>
                Получение сущности из кеша
            </summary>
            <param name="currencyType">Тип валюты</param>
            <param name="targetDate">Дата курса валюты. Если null, то текущий курс</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>
                Объект <see cref="T:InternalApi.Entities.Currency" />, содержащий курс валюты или null, если в кеше отсутствует актуальный курс
                валюты
            </returns>
        </member>
        <member name="M:InternalApi.Services.CachedCurrencyApi.SecureUpdateCacheAsync(InternalApi.Entities.CurrencyType,System.Nullable{System.DateOnly},System.Threading.CancellationToken)">
            <summary>
                Потокобезопасное обновление кеша
            </summary>
            <param name="currencyType">Тип валюты</param>
            <param name="targetDate">Дата курса валюты. Если null, то текущий.</param>
            <param name="cancellationToken">Токен отмены</param>
        </member>
        <member name="M:InternalApi.Services.CachedCurrencyApi.UpdateCacheAsync(System.Nullable{System.DateOnly},System.Threading.CancellationToken)">
            <summary>
                Обновление данных на указанную дату.
            </summary>
            <param name="targetDate">Дата искомого курса валюты. Если дата не указана - получить текущие.</param>
            <param name="cancellationToken">Токен отмены</param>
        </member>
        <member name="M:InternalApi.Services.CachedCurrencyApi.ParseEntity(InternalApi.Dtos.RootCurrencyApiDto)">
            <summary>
                Парсинг сущностей из DTO, получаемого от внешнего API
            </summary>
            <param name="apiDto">DTO от внешнего API</param>
            <returns></returns>
        </member>
        <member name="M:InternalApi.Services.CachedCurrencyApi.SaveEntities(System.Collections.Generic.IEnumerable{InternalApi.Entities.Currency},System.Threading.CancellationToken)">
            <summary>
                Сохранение сущностей в базу данных
            </summary>
            <param name="currencies">Перечисление сущностей, которые должны быть сохранены</param>
            <param name="cancellationToken">Токен отмены</param>
        </member>
        <member name="T:InternalApi.Services.CacheEntityNotFoundException">
            <summary>
                Не удалось найти сущность в кеше
            </summary>
        </member>
        <member name="M:InternalApi.Services.CacheEntityNotFoundException.#ctor(System.String)">
            <summary>
                Конструктор исключения
            </summary>
            <param name="message">Сообщение исключения</param>
        </member>
        <member name="T:InternalApi.Services.CurrencyService">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Services.CurrencyService.GetCurrency(System.String)">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Services.CurrencyService.GetDefaultCurrency">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Services.CurrencyService.GetCurrencyOnDate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Services.CurrencyService.GetSettings">
            <inheritdoc />
        </member>
        <member name="T:InternalApi.Services.GetCurrencyService">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Services.GetCurrencyService.#ctor(InternalApi.Contracts.ICachedCurrencyApi,Microsoft.Extensions.Options.IOptions{InternalApi.Dtos.CurrencyCacheSettings},InternalApi.Contracts.ICurrencyApi)">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Services.GetCurrencyService.GetCurrency(CurrencyApi.Code,Grpc.Core.ServerCallContext)">
            <summary>
                Получение текущего курса валюты по указанному коду
            </summary>
            <param name="request">Запрос на получение курса валюты</param>
            <param name="context">Контекст запроса</param>
            <returns>Объект <see cref="T:CurrencyApi.CurrencyDTO" />, содержащий информацию о курсе валюты на указанную дату.</returns>
            <exception cref="T:System.OperationCanceledException">Выбрасывается, если операция была отменена.</exception>
        </member>
        <member name="M:InternalApi.Services.GetCurrencyService.GetCurrencyOnDate(CurrencyApi.CodeAndDate,Grpc.Core.ServerCallContext)">
            <summary>
                Получение курса валюты по указанному коду на указанную дату
            </summary>
            <param name="request">Запрос на получение курса валюты</param>
            <param name="context">Контекст запроса</param>
            <returns>Объект <see cref="T:CurrencyApi.CurrencyDTO" />, содержащий информацию о курсе валюты на указанную дату.</returns>
            <exception cref="T:System.OperationCanceledException">Выбрасывается, если операция была отменена.</exception>
        </member>
        <member name="M:InternalApi.Services.GetCurrencyService.GetSettings(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
                Получение настроек
            </summary>
            <param name="request">Запрос на получение настоек</param>
            <param name="context">Контекст запроса</param>
            <returns>Объект <see cref="T:Google.Protobuf.JsonFormatter.Settings" />, содержащий текущие настройки сервиса.</returns>
            <exception cref="T:System.OperationCanceledException">Выбрасывается, если операция была отменена.</exception>
        </member>
        <member name="M:InternalApi.Services.GetCurrencyService.ParseDto(InternalApi.Entities.Currency)">
            <summary>
                Маппинг курса валюты из кеша в DTO
            </summary>
            <param name="currency">Курс валюты из кеша</param>
            <returns>Объект <see cref="T:CurrencyApi.CurrencyDTO" />, содержащий курс валюты</returns>
        </member>
        <member name="T:InternalApi.Services.RenewalDatesDictionary">
            <summary>
            Сервис, предоставляющий глобальный словарь блокировок для обновления кеша
            </summary>
        </member>
        <member name="F:InternalApi.Services.RenewalDatesDictionary.RenewalDatesLockDictionary">
            <summary>
            Глобальный словарь блокировок для обновления кеша 
            </summary>
        </member>
        <member name="T:CurrencyApi.CurrencyApiReflection">
            <summary>Holder for reflection information generated from Protos/currencyApi.proto</summary>
        </member>
        <member name="P:CurrencyApi.CurrencyApiReflection.Descriptor">
            <summary>File descriptor for Protos/currencyApi.proto</summary>
        </member>
        <member name="F:CurrencyApi.Settings.BaseCurrencyFieldNumber">
            <summary>Field number for the "base_currency" field.</summary>
        </member>
        <member name="F:CurrencyApi.Settings.NewRequestsAvailableFieldNumber">
            <summary>Field number for the "new_requests_available" field.</summary>
        </member>
        <member name="F:CurrencyApi.Code.CurrencyTypeFieldNumber">
            <summary>Field number for the "CurrencyType" field.</summary>
        </member>
        <member name="F:CurrencyApi.CodeAndDate.CurrencyTypeFieldNumber">
            <summary>Field number for the "CurrencyType" field.</summary>
        </member>
        <member name="F:CurrencyApi.CodeAndDate.DateFieldNumber">
            <summary>Field number for the "date" field.</summary>
        </member>
        <member name="F:CurrencyApi.CurrencyDTO.CurrencyTypeFieldNumber">
            <summary>Field number for the "CurrencyType" field.</summary>
        </member>
        <member name="F:CurrencyApi.CurrencyDTO.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:CurrencyApi.GetCurrency.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:CurrencyApi.GetCurrency.GetCurrencyBase">
            <summary>Base class for server-side implementations of GetCurrency</summary>
        </member>
        <member name="M:CurrencyApi.GetCurrency.BindService(CurrencyApi.GetCurrency.GetCurrencyBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:CurrencyApi.GetCurrency.BindService(Grpc.Core.ServiceBinderBase,CurrencyApi.GetCurrency.GetCurrencyBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
    </members>
</doc>
