<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InternalApi.Api</name>
    </assembly>
    <members>
        <member name="T:InternalApi.Api.Contracts.ICachedCurrencyApi">
            <summary>
                Сервис кеширования данных из внешнего API
            </summary>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICachedCurrencyApi.GetCurrentCurrencyAsync(TestGrpc.CurrencyType,System.Threading.CancellationToken)">
            <summary>
                Получает текущий курс
            </summary>
            <param name="currencyType">Валюта, для которой необходимо получить курс</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Текущий курс</returns>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICachedCurrencyApi.GetCurrencyOnDateAsync(TestGrpc.CurrencyType,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получает курс валюты, актуальный на <paramref name="date" />
            </summary>
            <param name="currencyType">Валюта, для которой необходимо получить курс</param>
            <param name="date">Дата, на которую нужно получить курс валют</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Курс на дату</returns>
        </member>
        <member name="T:InternalApi.Api.Contracts.ICurrencyApi">
            <summary>
            Сервис взаимодействия со внешним CurrencyAPI
            </summary>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICurrencyApi.GetAllCurrentCurrenciesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Получает текущий курс для всех валют
            </summary>
            <param name="baseCurrency">Базовая валюта, относительно которой необходимо получить курс</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Список курсов валют</returns>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICurrencyApi.GetAllCurrenciesOnDateAsync(System.String,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получает курс для всех валют, актуальный на <paramref name="date" />
            </summary>
            <param name="baseCurrency">Базовая валюта, относительно которой необходимо получить курс</param>
            <param name="date">Дата, на которую нужно получить курс валют</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Список курсов валют на дату</returns>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICurrencyApi.IsNewRequestsAvailable(System.Threading.CancellationToken)">
            <summary>
                Наличие доступных токенов
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Возвращает true, если есть свободные токены, в иных случаях false</returns>
        </member>
        <member name="T:InternalApi.Api.Contracts.ICurrencyCacheRepositoryService">
            <summary>
            Сервис для получения данных из файлового кеша
            </summary>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICurrencyCacheRepositoryService.GetEntityAsync(TestGrpc.CurrencyType,System.Threading.CancellationToken)">
            <summary>
                Получение из кеша актуального курса валюты указанного типа
            </summary>
            <param name="currencyType">Тип валюты</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Объект <see cref="T:TestGrpc.CurrencyDTO"/>, содержащий актуальный курс валюты</returns>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICurrencyCacheRepositoryService.GetEntityAsync(TestGrpc.CurrencyType,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получение из кеша курса валюты указанного типа на указанную дату
            </summary>
            <param name="currencyType">Тип валюты</param>
            <param name="targetDate">Дата курса</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Объект <see cref="T:TestGrpc.CurrencyDTO"/>, содержащий курс валюты на указанную дату</returns>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICurrencyCacheRepositoryService.SaveEntitiesAsync(System.Collections.Generic.IEnumerable{InternalApi.Api.Entities.Currency},System.Threading.CancellationToken,System.Nullable{System.DateOnly})">
            <summary>
                Метод для кеширования новых <see cref="T:InternalApi.Api.Entities.Currency" />.
            </summary>
            <param name="currencies">Список объектов курса валюты</param>
            <param name="cancellationToken">Токен отмены</param>
            <param name="date">Дата курса валюты DTO. Если null, то UtcNow.</param>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICurrencyCacheRepositoryService.ReadAsync(System.String,TestGrpc.CurrencyType,System.Threading.CancellationToken)">
            <summary>
                Метод для чтения кешированных сущностей
            </summary>
            <param name="fileName">Название файла, содержащего сущность</param>
            <param name="currencyType">Тип валюты</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Полученный из кеша объект <see cref="T:TestGrpc.CurrencyDTO" /></returns>
        </member>
        <member name="M:InternalApi.Api.Contracts.ICurrencyCacheRepositoryService.FindCurrencyName(System.Threading.CancellationToken,System.Nullable{System.DateOnly})">
            <summary>
                Поиск названия сущности (имя файла, ID) указанного типа валюты в кеше
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <param name="currencyDate">Дата, на которую нужен курс валюты. По умолчанию: UtcNow</param>
            <returns>Название файла, если существует. Null - если подходящего не найдено.</returns>
        </member>
        <member name="T:InternalApi.Api.Contracts.ICurrencyService">
            <summary>
            Сервис для контроллера CurrencyController
            </summary>
        </member>
        <member name="T:InternalApi.Api.Controllers.CurrencyController">
            <summary>
                Методы для взаимодействия со внешним API
            </summary>
        </member>
        <member name="M:InternalApi.Api.Controllers.CurrencyController.#ctor(InternalApi.Api.Contracts.ICachedCurrencyApi,Microsoft.Extensions.Options.IOptions{InternalApi.Api.Entities.CurrencyCacheSettings},InternalApi.Api.Contracts.ICurrencyApi)">
            <summary>
            Конструктор контроллера
            </summary>
            <param name="cachedCurrencyApi">Сервис кеша для внешнего API</param>
            <param name="cacheSettings">Настройки</param>
            <param name="currencyApi">Сервис внешнего API</param>
        </member>
        <member name="M:InternalApi.Api.Controllers.CurrencyController.GetCurrency(TestGrpc.CurrencyType,System.Threading.CancellationToken)">
            <summary>
                Получение курса валюты с кодом по умолчанию
            </summary>
            <response code="200">Возвращает, если значение успешно получено.</response>
            <response code="400">Возвращает, если значение по умолчанию не найдено</response>
            <response code="429">Возвращает, если токены API исчерпаны.</response>
        </member>
        <member name="M:InternalApi.Api.Controllers.CurrencyController.GetCurrencyOnDate(TestGrpc.CurrencyType,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получение курса валюты на указанную дату
            </summary>
            <param name="currencyType">Тип валюты</param>
            <param name="date">Дата курса</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Возвращает, если значение успешно получено.</response>
            <response code="404">Возвращает, если значение <see cref="!:currencyCode" /> не найдено</response>
            <response code="429">Возвращает, если токены API исчерпаны.</response>
        </member>
        <member name="M:InternalApi.Api.Controllers.CurrencyController.GetSettings(System.Threading.CancellationToken)">
            <summary>
                Текущие настройки приложения
            </summary>
            <response code="200">Возвращает, если настройки успешно получены.</response>
        </member>
        <member name="M:InternalApi.Api.Controllers.CurrencyController.GetHealthCheck(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Проверить что API работает
            </summary>
            <param name="checkExternalApi">Необходимо проверить работоспособность внешнего API.
            Если FALSE или NULL - проверяется работоспособность только текущего API</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">
            Возвращает если удалось получить доступ к API
            </response>
            <response code="400">
            Возвращает если удалось не удалось получить доступ к API
            </response>
        </member>
        <member name="T:InternalApi.Api.Controllers.HealthCheckResult">
            <summary>
            Результат проверки работоспособности API
            </summary>
        </member>
        <member name="P:InternalApi.Api.Controllers.HealthCheckResult.CheckedOn">
            <summary>
            Дата проверки
            </summary>
        </member>
        <member name="P:InternalApi.Api.Controllers.HealthCheckResult.Status">
            <summary>
            Статус работоспособности API
            </summary>
        </member>
        <member name="T:InternalApi.Api.Controllers.HealthCheckResult.CheckStatus">
            <summary>
            Статус API
            </summary>
        </member>
        <member name="F:InternalApi.Api.Controllers.HealthCheckResult.CheckStatus.Ok">
            <summary>
            API работает
            </summary>
        </member>
        <member name="F:InternalApi.Api.Controllers.HealthCheckResult.CheckStatus.Failed">
            <summary>
            Ошибка в работе API
            </summary>
        </member>
        <member name="T:InternalApi.Api.Dtos.ApiStatusDto">
            <summary>
                Статус внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Api.Dtos.ApiStatusDto.AccountId">
            <summary>
            ID аккаунта
            </summary>
        </member>
        <member name="P:InternalApi.Api.Dtos.ApiStatusDto.Quotas">
            <summary>
            Лимиты в текущем месяце
            </summary>
        </member>
        <member name="T:InternalApi.Api.Dtos.ApiLimitsDto">
            <summary>
            Лимиты внешнего API
            </summary>
        </member>
        <member name="T:InternalApi.Api.Dtos.CurrencyApiDto">
            <summary>
                Получаемый из внешнего API объект
            </summary>
        </member>
        <member name="P:InternalApi.Api.Dtos.CurrencyApiDto.Meta">
            <summary>
            Мета-данные запроса
            </summary>
        </member>
        <member name="P:InternalApi.Api.Dtos.CurrencyApiDto.Data">
            <summary>
            Содержимое запроса - словарь код_валюты : <see cref="T:InternalApi.Api.Entities.Currency"/>
            </summary>
        </member>
        <member name="T:InternalApi.Api.Dtos.MetaData">
            <summary>
                Метадата получаемого из внешнего API объекта <see cref="T:InternalApi.Api.Dtos.CurrencyApiDto" />
            </summary>
        </member>
        <member name="P:InternalApi.Api.Dtos.MetaData.LastUpdatedAt">
            <summary>
            Дата последнего обновления курса валюты
            </summary>
        </member>
        <member name="T:InternalApi.Api.Dtos.SettingsDto">
            <summary>
            Настройки API
            </summary>
        </member>
        <member name="P:InternalApi.Api.Dtos.SettingsDto.BaseCurrency">
            <summary>
                базовая валюта, относительно которой считается курс
            </summary>
        </member>
        <member name="P:InternalApi.Api.Dtos.SettingsDto.NewRequestsAvailable">
            <summary>
                количество использованных запросов, полученное от внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Api.Dtos.SettingsDto.CurrencyRoundCount">
            <summary>
                Количество знаков после запятой, до которого следует округлять значение курса валют
            </summary>
        </member>
        <member name="T:InternalApi.Api.Entities.Currency">
            <summary>
            Курс валюты
            </summary>
        </member>
        <member name="P:InternalApi.Api.Entities.Currency.Code">
            <summary>
                Код валюты
            </summary>
        </member>
        <member name="P:InternalApi.Api.Entities.Currency.Value">
            <summary>
                Значение курса валюты, относительно базовой валюты
            </summary>
        </member>
        <member name="T:InternalApi.Api.Entities.CurrenciesOnDate">
            <summary>
            Курсы валют на конкретную дату
            </summary>
        </member>
        <member name="P:InternalApi.Api.Entities.CurrenciesOnDate.LastUpdatedAt">
            <summary>
            Дата обновления данных
            </summary>
        </member>
        <member name="P:InternalApi.Api.Entities.CurrenciesOnDate.Currencies">
            <summary>
            Список курсов валют
            </summary>
        </member>
        <member name="T:InternalApi.Api.Entities.CurrencyApiSettings">
            <summary>
                Настройки внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Api.Entities.CurrencyApiSettings.BaseUrl">
            <summary>
                Адрес внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Api.Entities.CurrencyApiSettings.ApiKey">
            <summary>
                Ключ внешнего API
            </summary>
        </member>
        <member name="T:InternalApi.Api.Entities.CurrencyCacheSettings">
            <summary>
                Настройки кеша для внешнего API
            </summary>
        </member>
        <member name="P:InternalApi.Api.Entities.CurrencyCacheSettings.CacheExpirationHours">
            <summary>
                Время жизни кеша
            </summary>
        </member>
        <member name="P:InternalApi.Api.Entities.CurrencyCacheSettings.BaseCurrency">
            <summary>
                Базовая валюта, относительно которой считается курс валюты
            </summary>
        </member>
        <member name="T:InternalApi.Api.ExceptionHandlerExtensions">
            <summary>
            Глобальный обработчик исключений
            </summary>
        </member>
        <member name="M:InternalApi.Api.ExceptionHandlerExtensions.#ctor(Microsoft.Extensions.Logging.ILogger{InternalApi.Api.ExceptionHandlerExtensions})">
            <summary>
            Конструктор глобального обработчика исключений
            </summary>
            <param name="logger">Логгер</param>
        </member>
        <member name="M:InternalApi.Api.ExceptionHandlerExtensions.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <inheritdoc />
        </member>
        <member name="T:InternalApi.Api.ExceptionInterceptor">
            <summary>
                Глобальный обработчик исключений для grpc-запросов
            </summary>
        </member>
        <member name="M:InternalApi.Api.ExceptionInterceptor.#ctor(Microsoft.Extensions.Logging.ILogger{InternalApi.Api.ExceptionInterceptor})">
            
        </member>
        <member name="M:InternalApi.Api.ExceptionInterceptor.UnaryServerHandler``2(``0,Grpc.Core.ServerCallContext,Grpc.Core.UnaryServerMethod{``0,``1})">
            <inheritdoc />
        </member>
        <member name="T:InternalApi.Api.Services.ApiService">
            <summary>
                Сервис для взаимодействия с внешним Currency API
            </summary>
        </member>
        <member name="M:InternalApi.Api.Services.ApiService.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{InternalApi.Api.Entities.CurrencyApiSettings},System.Net.Http.HttpClient)">
            <summary>
                Конструктор класса ApiService
            </summary>
            <param name="apiSettingsSnapshot">Настройки внешнего API</param>
            <param name="httpClient">Http клиент</param>
        </member>
        <member name="M:InternalApi.Api.Services.ApiService.GetAllCurrentCurrenciesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Получение актуального курса валют
            </summary>
            <param name="baseCurrency">Базовая валюта</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Массив <see cref="T:InternalApi.Api.Entities.Currency" />, содержащий актуальный курс валют</returns>
            <exception cref="T:System.OperationCanceledException">Операция была отменена</exception>
        </member>
        <member name="M:InternalApi.Api.Services.ApiService.GetAllCurrenciesOnDateAsync(System.String,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получение курса валют на указанную дату
            </summary>
            <param name="baseCurrency">Базовая валюта</param>
            <param name="date">Дата курса валюты</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Объект <see cref="T:InternalApi.Api.Entities.CurrenciesOnDate" />, содержащий курс валюты на указанную дату</returns>
            <exception cref="T:System.OperationCanceledException">Операция была отменена</exception>
        </member>
        <member name="M:InternalApi.Api.Services.ApiService.IsNewRequestsAvailable(System.Threading.CancellationToken)">
            <summary>
                Существуют ли доступные токены внешнего API?
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <returns>true, если существуют доступные токены, иначе false</returns>
            <exception cref="T:System.OperationCanceledException">Операция была отменена</exception>
        </member>
        <member name="M:InternalApi.Api.Services.ApiService.HttpClientHelper(System.String,System.Threading.CancellationToken)">
            <summary>
                Получение данных из внешнего API
            </summary>
            <param name="url">url</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Тело ответа в виде строки</returns>
        </member>
        <member name="T:InternalApi.Api.Services.ApiRequestLimitException">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.ApiRequestLimitException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:InternalApi.Api.Services.CachedCurrencyApi">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.CachedCurrencyApi.#ctor(Microsoft.Extensions.Logging.ILogger{InternalApi.Api.Services.CachedCurrencyApi},InternalApi.Api.Contracts.ICurrencyCacheRepositoryService)">
            <summary>
            Конструктор класса CachedCurrencyApi.
            </summary>
            <param name="logger">Логгер</param>
            <param name="cacheRepositoryService">Сервис для получения данных из файлового кеша</param>
        </member>
        <member name="M:InternalApi.Api.Services.CachedCurrencyApi.GetCurrentCurrencyAsync(TestGrpc.CurrencyType,System.Threading.CancellationToken)">
            <summary>
                Получение курса валюты по типу
            </summary>
            <param name="currencyType">Тип валюты</param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:InternalApi.Api.Services.CachedCurrencyApi.GetCurrencyOnDateAsync(TestGrpc.CurrencyType,System.DateOnly,System.Threading.CancellationToken)">
            <summary>
                Получение курса валюты на указанную дату.
            </summary>
            <param name="currencyType">Тип валюты</param>
            <param name="date">Дата курса валюты</param>
            <param name="cancellationToken"></param>
            <returns>Полученный из кеша или API <see cref="T:TestGrpc.CurrencyDTO" /></returns>
        </member>
        <member name="T:InternalApi.Api.Services.CurrencyCacheFileRepositoryService">
            <summary>
                Сервис для получения данных из файлового кеша
            </summary>
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyCacheFileRepositoryService.#ctor(Microsoft.Extensions.Logging.ILogger{InternalApi.Api.Services.CurrencyCacheFileRepositoryService},InternalApi.Api.Contracts.ICurrencyApi,Microsoft.Extensions.Options.IOptionsMonitor{InternalApi.Api.Entities.CurrencyCacheSettings})">
            <summary>
                Конструктор класса CurrencyCacheFileRepositoryService
            </summary>
            <param name="logger">Логгер</param>
            <param name="currencyApi">Сервис для получения данных из внешнего API</param>
            <param name="cacheSettings">Настройки файлового кеша</param>
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyCacheFileRepositoryService.GetEntityAsync(TestGrpc.CurrencyType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyCacheFileRepositoryService.GetEntityAsync(TestGrpc.CurrencyType,System.DateOnly,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyCacheFileRepositoryService.UpdateEntitiesFromApi(System.Threading.CancellationToken,System.Nullable{System.DateOnly})">
            <summary>
                Получение сущностей из API
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <param name="currencyDate">Дата курса валюты. Если null, то UtcNow"/></param>
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyCacheFileRepositoryService.SaveEntitiesAsync(System.Collections.Generic.IEnumerable{InternalApi.Api.Entities.Currency},System.Threading.CancellationToken,System.Nullable{System.DateOnly})">
            <summary>
                Метод для кеширования новых <see cref="T:InternalApi.Api.Entities.Currency" />.
            </summary>
            <param name="currencies">Список объектов курса валюты</param>
            <param name="cancellationToken">Токен отмены</param>
            <param name="date">Дата курса валюты DTO. Если null, то UtcNow.</param>
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyCacheFileRepositoryService.ReadAsync(System.String,TestGrpc.CurrencyType,System.Threading.CancellationToken)">
            <summary>
                Метод для чтения кешированных сущностей
            </summary>
            <param name="fileName">Название файла, содержащего сущность</param>
            <param name="currencyType">Тип валюты</param>
            <param name="cancellationToken">Токен отмены</param>
            <returns>Полученный из кеша объект <see cref="T:TestGrpc.CurrencyDTO" /></returns>
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyCacheFileRepositoryService.FindEntityOrUpdateCache(System.Threading.CancellationToken,System.Nullable{System.DateOnly})">
            <summary>
                Поиск кешированных DTO. Если не найдены - обновление кеша и поиск.
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <param name="currencyDate">Дата курса валюты. Если не указана - поиск валидного кеша на UtcNow.</param>
            <exception cref="T:System.IO.IOException">Выбрасывается при неудачной попытке обновления кеша</exception>
            <returns>Название файла.</returns>
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyCacheFileRepositoryService.FindCurrencyName(System.Threading.CancellationToken,System.Nullable{System.DateOnly})">
            <summary>
                Поиск названия файла с сущностью указанного типа валюты в кеше
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <param name="currencyDate">Дата, на которую нужен курс валюты. По умолчанию: UtcNow</param>
            <returns>Название файла, если существует. Null - если подходящего не найдено.</returns>
        </member>
        <member name="T:InternalApi.Api.Services.CurrencyService">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyService.GetCurrency(System.String)">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyService.GetDefaultCurrency">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyService.GetCurrencyOnDate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.CurrencyService.GetSettings">
            <inheritdoc />
        </member>
        <member name="T:InternalApi.Api.Services.GetCurrencyService">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.GetCurrencyService.#ctor(InternalApi.Api.Contracts.ICachedCurrencyApi,Microsoft.Extensions.Options.IOptions{InternalApi.Api.Entities.CurrencyCacheSettings},InternalApi.Api.Contracts.ICurrencyApi)">
            <inheritdoc />
        </member>
        <member name="M:InternalApi.Api.Services.GetCurrencyService.GetCurrency(TestGrpc.Code,Grpc.Core.ServerCallContext)">
            <summary>
                Получение текущего курса валюты по указанному коду
            </summary>
            <param name="request">Запрос на получение курса валюты</param>
            <param name="context">Контекст запроса</param>
            <returns>Объект <see cref="T:TestGrpc.CurrencyDTO" />, содержащий информацию о курсе валюты на указанную дату.</returns>
            <exception cref="T:System.OperationCanceledException">Выбрасывается, если операция была отменена.</exception>
        </member>
        <member name="M:InternalApi.Api.Services.GetCurrencyService.GetCurrencyOnDate(TestGrpc.CodeAndDate,Grpc.Core.ServerCallContext)">
            <summary>
                Получение курса валюты по указанному коду на указанную дату
            </summary>
            <param name="request">Запрос на получение курса валюты</param>
            <param name="context">Контекст запроса</param>
            <returns>Объект <see cref="T:TestGrpc.CurrencyDTO" />, содержащий информацию о курсе валюты на указанную дату.</returns>
            <exception cref="T:System.OperationCanceledException">Выбрасывается, если операция была отменена.</exception>
        </member>
        <member name="M:InternalApi.Api.Services.GetCurrencyService.GetSettings(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
                Получение настроек
            </summary>
            <param name="request">Запрос на получение настоек</param>
            <param name="context">Контекст запроса</param>
            <returns>Объект <see cref="T:Google.Protobuf.JsonFormatter.Settings" />, содержащий текущие настройки сервиса.</returns>
            <exception cref="T:System.OperationCanceledException">Выбрасывается, если операция была отменена.</exception>
        </member>
        <member name="M:InternalApi.Api.Services.GetCurrencyService.ParseDto(InternalApi.Api.Entities.Currency)">
            <summary>
                Маппинг курса валюты из кеша в DTO
            </summary>
            <param name="currency">Курс валюты из кеша</param>
            <returns>Объект <see cref="T:TestGrpc.CurrencyDTO" />, содержащий курс валюты</returns>
        </member>
        <member name="T:TestGrpc.CurrencyApiReflection">
            <summary>Holder for reflection information generated from Protos/currencyApi.proto</summary>
        </member>
        <member name="P:TestGrpc.CurrencyApiReflection.Descriptor">
            <summary>File descriptor for Protos/currencyApi.proto</summary>
        </member>
        <member name="F:TestGrpc.Settings.BaseCurrencyFieldNumber">
            <summary>Field number for the "base_currency" field.</summary>
        </member>
        <member name="F:TestGrpc.Settings.NewRequestsAvailableFieldNumber">
            <summary>Field number for the "new_requests_available" field.</summary>
        </member>
        <member name="F:TestGrpc.Code.CurrencyTypeFieldNumber">
            <summary>Field number for the "CurrencyType" field.</summary>
        </member>
        <member name="F:TestGrpc.CodeAndDate.CurrencyTypeFieldNumber">
            <summary>Field number for the "CurrencyType" field.</summary>
        </member>
        <member name="F:TestGrpc.CodeAndDate.DateFieldNumber">
            <summary>Field number for the "date" field.</summary>
        </member>
        <member name="F:TestGrpc.CurrencyDTO.CurrencyTypeFieldNumber">
            <summary>Field number for the "CurrencyType" field.</summary>
        </member>
        <member name="F:TestGrpc.CurrencyDTO.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:TestGrpc.GetCurrency.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:TestGrpc.GetCurrency.GetCurrencyBase">
            <summary>Base class for server-side implementations of GetCurrency</summary>
        </member>
        <member name="M:TestGrpc.GetCurrency.BindService(TestGrpc.GetCurrency.GetCurrencyBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:TestGrpc.GetCurrency.BindService(Grpc.Core.ServiceBinderBase,TestGrpc.GetCurrency.GetCurrencyBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
    </members>
</doc>
